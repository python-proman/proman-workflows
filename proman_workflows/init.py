# copyright: (c) 2020 by Jesse Johnson.
# license: Apache 2.0, see LICENSE for more details.
"""Provide project initialization."""

import logging
import os
from typing import TYPE_CHECKING, Any, Dict

import keyring
import pyinputplus as pyip
from invoke import Executor, task

# TODO: switch to executor
from . import config
from .collection import Collection

if TYPE_CHECKING:
    from invoke import Context
    from gpg import GenKey


setup_tasks = Collection()
setup_tasks.configure(
    {
        # 'dirs': asdict(dirs),
        # 'spec': specfile.data,
        'python_path': config.python_path,
        'repo_dir': config.repo_dir,
        'working_dir': config.working_dir,
        'templates_dir': config.templates_dir,
    }
)
setup_tasks.load_collections(
    collections=[
        {
            'name': 'vcs',
            'driver_name': 'git',
            'driver_namespace': 'proman.workflow.vcs',
        },
        {
            'name': 'gpg',
            'driver_name': 'gpg',
            'driver_namespace': 'proman.workflow.pki',
        },
    ]
)
__setup = Executor(setup_tasks)


def create_signingkey(ctx, name, email):  # type: (Context, str, str) -> GenKey
    """Create a signing key."""
    password = pyip.inputPassword('Enter GPG password: ', limit=255)

    # TODO: get comment

    rsp = pyip.inputYesNo('Perform adanced GPG setup (y/n): ')
    if rsp == 'yes':
        # TODO: enum auto
        KEY_TYPES = [
            'RSA',
            'ElGamal',
            'DSA',
            'ECDH',
            'ECDSA',
            'EDDSA',
        ]
        key_type = pyip.inputMenu(
            KEY_TYPES,
            prompt='Select GPG key type:\n',
            default='EDDSA',
            numbered=True,
        )
        subkey_type = pyip.inputMenu(
            KEY_TYPES,
            prompt='Select GPG subkey type:\n',
            default='EDDSA',
            numbered=True,
        )

        # key_length = pyip.inputInt('Enter key length: ')
        expire_date = pyip.inputStr(
            prompt='Enter expiration date: ',
            allowRegexes=[r'^(0|([\d]{1,4}[d|w|m|y]))$'],
            default='1y',
        )
        print(expire_date)

    key = __setup.execute(
        (
            'gpg.gen_key',
            {
                'name': name,
                'email': email,
                'password': password,
                'comment': 'generated by protools',
                'key_type': key_type,
                'key_length': 4096,
                'subkey_type': subkey_type,
                'subkey_length': 4096,
                'expire_date': '1y',
            }
        )
    )

    signingkey = key['keyid']
    if not keyring.get_password(f"{name}-signingkey", signingkey):
        keyring.set_password(f"{name}-signingkey", signingkey, password)

    return signingkey


def setup_gitconfig(ctx, update):  # type: (Context, bool) -> Dict[str, Any]
    """Ensure version control system is setup."""
    print('Check git user info is setup.', end='\n\n')
    result = __setup.execute(('vcs.config.load', {'scope': 'global'}))
    gitconfig = [y for x, y in result.items() if x.name == 'load'][0]

    # select gpg if found else generate gpg key
    # setup gpg commit signing
    # setup gpg package signing

    if 'user' not in gitconfig['sections']:
        print('Verfying git user is defined...', end=' ')

    # if not config.retrieve('.gpg.signingkey'):
    try:
        print('Verfying git user.name is defined...', end=' ')
        name = gitconfig['sections']['user']['name']
        print('found')
    except Exception as err:
        logging.info(err)
        print('missing', end='\n\n')
        name = pyip.inputStr('Enter git user.name: ', limit=255)
        gitconfig['sections']['user']['name'] = name

    try:
        print('Verfying git user.email is defined...', end=' ')
        email = gitconfig['sections']['user']['email']
        print('found')
    except Exception as err:
        logging.info(err)
        print('missing', end='\n\n')
        email = pyip.inputEmail('Enter git user.email: ', limit=255)
        gitconfig['sections']['user']['email'] = email

    try:
        print('Verfying git user.sigingkey is defined...', end=' ')
        signingkey = gitconfig['sections']['user']['signingkey']
        print('found')
    except Exception as err:
        logging.info(f"{err}: no gpg signingkey defined")
        print('missing', end='\n\n')

        result = __setup.execute(
            ('gpg.list_keys', {'secret': False, 'keys': None, 'sigs': False})
        )
        gpg_keys = [
            y
            for x, y in result.items()
            if x.name == 'list_keys'
        ][0]

        choices = ['Create a new subkey', 'Skip']
        if gpg_keys != []:
            print(
                'A GPG key was found but user.signingkey is undefined:',
                end='\n\n'
            )
            choices = [
                f"{k['keyid']}:{k['uids'][0]}" for k in gpg_keys
            ] + choices

        selection = pyip.inputMenu(
            choices=choices,
            prompt='Create a key or use an existing one:\n',
            numbered=True
        )

        signingkey = None
        if selection == 'Create a new subkey':
            signingkey = create_signingkey(ctx, name, email)
        elif selection == 'Skip':
            return gitconfig
        else:
            signingkey = selection.split(':')[0]

        if signingkey:
            gitconfig['sections']['user']['signingkey'] = signingkey

    # setup keyring secrets
    if not hasattr(ctx, 'gpg'):
        ctx.gpg = dict()

    # ctx.gpg.signingkey = signingkey
    # ctx.gpg.password = password

    # config.create('.gpg.signingkey', ctx.gpg.signingkey)
    # from pprint import pprint
    # pprint(ctx.config['gpg'])

    __setup.execute(
        (
            'vcs.config.dump',
            {
                'data': gitconfig,
                'template_name': 'gitconfig',
                'dest': os.path.join(os.path.expanduser('~'), '.gitconfig'),
                'update': update,
            }
        )
    )
    return gitconfig


def setup_gitignore(ctx):  # type: (Context) -> None
    """Check gitignore setup."""
    ...


def setup_githooks(ctx):  # type: (Context) -> None
    """Check githooks setup."""
    ...


@task(iterable=['name'])
def setup(ctx, update=False):  # type: (Context, bool) -> None
    """Configure workspace for project development."""
    os.system('clear')
    print('This tool will assist with environment setup.', end='\n\n')

    # config = GlobalConfig(directory=ctx.dirs.config_dir)

    setup_gitconfig(ctx, update)
    setup_gitignore(ctx)
    setup_githooks(ctx)

    # if not os.path.exists(config.directory):
    #     os.mkdir(ctx.dirs.config_dir)

    # if update or not os.path.exists(config.filepath):
    #     config.dump()


namespace = Collection(setup)
