# -*- coding: utf-8 -*-
# copyright: (c) 2020 by Jesse Johnson.
# license: Apache 2.0, see LICENSE for more details.
"""Build Task-Runner."""

# import importlib
from typing import TYPE_CHECKING, Optional

from invoke import task

from . import flit, poetry

if TYPE_CHECKING:
    from invoke import Context

__version__ = '0.1.0'
if 'dev' in __version__ or 'rc' in __version__:
    part = 'build'
else:
    part = 'patch'

if (
    'dev' in __version__
    or 'a' in __version__
    or 'b' in __version__
    or 'rc' in __version__
):
    part = 'build'
else:
    part = 'patch'


@task
def clean(ctx):  # type: (Context) -> None
    """Clean project dependencies and build."""
    paths = [
        '**/__pycache__',
        '**/*.pyc',
        '**/dist',
    ]
    for path in paths:
        ctx.run(f"rm -rf {path}")


@task
def build(ctx, kind=None):  # type: (Context, Optional[bool]) -> None
    """Build wheel package."""
    if ctx.spec['build-system']['build-backend'] == 'poetry.core.masonry.api':
        poetry.build(ctx)
    elif ctx.spec['build-system']['build-backend'] == 'setuptools.build_meta':
        ctx.run(f"{ctx.python_path} -m build")
    elif ctx.spec['build-system']['build-backend'] == 'flit_core.buildapi':
        flit.build(ctx, kind=kind)


@task
def install(
    ctx,
    deps=None,
    extras=None,
):  # type: (Context, str, Optional[str]) -> None
    """Install within environment."""
    # args = []
    if ctx.spec['build-system']['build-backend'] == 'flit_core.buildapi':
        # kind='symlink',
        # user=None,
        # env=None,
        # deps=None,
        # extras=None,
        if not deps:
            deps = 'develop'
        flit.install(ctx, deps=deps, extras=extras)
    elif (
        ctx.spec['build-system']['build-backend'] == 'poetry.core.masonry.api'
    ):
        # dev=None,
        # editable=True,
        # remove_untracked=None,
        # extras=None,
        poetry.install(ctx, extras=extras)


@task
def publish(ctx):  # type: (Context) -> None
    """Publish project distribution."""
    if ctx.spec['build-system']['build-backend'] == 'flit_core.buildapi':
        flit.publish(ctx)
    elif (
        ctx.spec['build-system']['build-backend'] == 'poetry.core.masonry.api'
    ):
        poetry.publish(ctx)


@task
def version(
    ctx,
    part=part,
    tag=False,
    commit=False,
    message=None,
):  # type: (Context, str, bool, bool, Optional[str]) -> None
    """Update project version and apply tags."""
    args = [part]
    if commit:
        args.append('--commit')
    else:
        args.append('--dry-run')
        args.append('--allow-dirty')
        args.append('--verbose')
        print('Add "--commit" to actually bump the version.')
    if tag or message:
        args.append('--tag')
        if message:
            args.append(f"--tag-message '{message}'")
    ctx.run(f"bumpversion {' '.join(args)}")
