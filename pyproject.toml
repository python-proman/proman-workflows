[tool.poetry]
name = "proman-workflows"
version = "0.1.0-a1"
description = "Task-runner to automate projects."
authors = ["Jesse P. Johnson <jpj6652@gmail.com>"]
readme = "README.md"
classifiers = ["License :: OSI Approved :: Apache Software License"]
include = ["proman.workflows/_vendor/gitignore", "proman.workflows/templates"]

[tool.poetry.dependencies]
python = "^3.6.2"
jinja2 = "^2.11.2"
invoke = "^1.5.0"
compendium = "^0.1.1-alpha.0"
python-gnupg = "^0.4.7"
proman-common = "^0.1.1-alpha.1"
editables = "^0.2"
stevedore = "^3.4.0"
briefcase = "^0.3.5"
pygit2 = "^1.6.1"
PyInputPlus = "^0.2.12"
keyring = "^23.2.1"
SecretStorage = {version = "^3.3.1", platform = "linux"}

[tool.poetry.dev-dependencies]
black = "^21.7b0"
docstr-coverage = "^1.2.0"
flake8 = "^3.8.3"
pydocstyle = "^5.0.2"
pytest = "^5.2"
pytest-cov = "^2.10.0"
isort = "^5.9.2"
bandit = "^1.6.2"
safety = "^1.9.0"
mkdocs = "^1.2.2"
mkdocs-material = "^7.2.0"
mkdocstrings = "^0.15.2"
mypy = "^0.910"
pyfakefs = "^4.5.0"
types-Jinja2 = "^2.11.2"
tox = "^3.24.0"
python-gilt = "^1.2.3"
twine = "^3.5.0"

[tool.poetry.extras]
kde = ["dbus-python"]

[tool.poetry.plugins."proman.workflows.pki"]
gpg = "proman_workflows.pki.gpg:namespace"
tls = "proman_workflows.pki.tls:namespace"

[tool.poetry.plugins."proman.workflows.vcs"]
git = "proman_workflows.git:namespace"

[tool.poetry.plugins."proman.workflows.package"]
flit = "proman_workflows.package.flit:namespace"
poetry = "proman_workflows.package.poetry:namespace"
setuptools = "proman_workflows.package.setuptools:namespace"
twine = "proman_workflows.package.twine:namespace"

[tool.poetry.plugins."proman.workflows.executable"]
briefcase = "proman_workflows.executable.briefcase:namespace"
# pyinstaller = "proman_workflows.executable.pyinstaller:namespace"

[tool.poetry.plugins."proman.workflows.lint"]
flake8 = "proman_workflows.qa.flake8:namespace"

[tool.poetry.plugins."proman.workflows.formatter"]
autopep8 = "proman_workflows.qa.autopep8:namespace"
black = "proman_workflows.qa.black:namespace"
isort = "proman_workflows.qa.isort:namespace"

[tool.poetry.plugins."proman.workflows.unit_tests"]
pytest = "proman_workflows.qa.pytest:namespace"

# [tool.poetry.plugins."proman.workflows.coverage"]
# pytest = "proman_workflows.qa.pytest:namespace"

[tool.poetry.plugins."proman.workflows.typing"]
mypy = "proman_workflows.qa.mypy:namespace"

[tool.poetry.plugins."proman.workflows.sca"]
bandit = "proman_workflows.security.bandit:namespace"
safety = "proman_workflows.security.safety:namespace"

[tool.poetry.plugins."proman.workflows.container.compose"]
docker_compose = "proman_workflows.container.docker:namespace"
podman_compose = "proman_workflows.container.podman:namespace"

[tool.poetry.plugins."proman.workflows.docs"]
mkdocs = "proman_workflows.docs.mkdocs:namespace"

[tool.poetry.scripts]
workflow-tools = "proman_workflows:tools.run"
workflow = "proman_workflows:workflow.run"

# TODO: deprecate flit
# [tool.flit.metadata]
# module = "proman.workflows"
# author = "Jesse P. Johnson"
# author-email = "jpj6652@gmail.com"
# home-page = "https://github.com/python-protools/proman-workflows"
# requires = ["compendium", "invoke", "keyring", "jinja2", "proman-common", "stevedore"]
# classifiers = ["License :: OSI Approved :: Apache Software License"]
#
# [tool.flit.entrypoints."proman.precommit.validate"]
# conventional_commits = "workflows:precommit"
#
# [tool.flit.scripts]
# project = "workflows:project.run"
# workflow = "workflows:workflow.run"

[tool.isort]
profile = "black"
line_length = 79

[tool.black]
ling-length = 79
include = '\.pyi?$'
exclude = '''

(
  /(
    | \.git
    | \.mypy_cache
    | \.pytest_cache
    | \.vagrant
    | _build
    | dist
  )
)
'''

[tool.pytest.ini_options]
filterwarnings = [
  "ignore::DeprecationWarning:invoke.*:",
  "ignore::DeprecationWarning:_yaml.*:",
]

[tool.mypy]
warn_redundant_casts = true
warn_unused_ignores = true
disallow_untyped_defs = true
ignore_missing_imports = true

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
# requires = ["flit_core>=2,<4"]
# build-backend = "flit_core.buildapi"
# requires = ['setuptools>=40.8.0', 'wheel']
# build-backend = 'setuptools.build_meta'
